Standard settings: --v3 --debug --maxrecdepth 1 --gen_method newtrav --trav_type striped --trav_priority sfs --attempts 0 --to 1500 --no-save-lemmas --inv-templ 0
Timeout: 300
Freqhorn: ../build/tools/deep/freqhorn
Sun Oct  9 16:52:35 EDT 2022
array_copy.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_2    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))=0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (<= i1 0) (= (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.14
user 0.13
sys 0.01
array_copy_increment.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)<select(_FH_inv_1, i1)    i1>=_FH_inv_2])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))<0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (<= i1 0) (< (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.14
user 0.13
sys 0.00
array_copy_increment_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_2    select(_FH_inv_0, i1)<select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_2))>=0    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))<0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_2)) 0) (< (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0)))))
real 0.12
user 0.12
sys 0.00
array_copy_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_2    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_2))>=0    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_2)) 0) (= (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0)))))
real 0.12
user 0.11
sys 0.01
array_copy_inverse.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2530786 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.12
user 0.12
sys 0.00
array_copy_inverse_easier.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_2    select(_FH_inv_0, [+    _FH_inv_3    -i1    -1])=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, [+    _FH_inv_3    -i1    -1])+(-select(_FH_inv_1, i1)))=0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (< i1 0) (= (+ (select _FH_inv_0 (+ _FH_inv_3 (- i1) (- 1))) (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.14
user 0.13
sys 0.01
array_copy_sum.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_3    (select(_FH_inv_0, i1)+select(_FH_inv_1, i1))=select(_FH_inv_2, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_3))>=0    [+    select(_FH_inv_1, i1)    select(_FH_inv_0, i1)    -select(_FH_inv_2, i1)]=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= _FH_inv_3 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_3)) 0) (= (+ (select _FH_inv_1 i1) (select _FH_inv_0 i1) (- (select _FH_inv_2 i1))) 0)))))
real 0.16
user 0.15
sys 0.00
array_copy_sum_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_3    (select(_FH_inv_0, i1)+select(_FH_inv_1, i1))=select(_FH_inv_2, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_3))>=0    [+    select(_FH_inv_0, i1)    select(_FH_inv_1, i1)    -select(_FH_inv_2, i1)]=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_3 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_3)) 0) (= (+ (select _FH_inv_0 i1) (select _FH_inv_1 i1) (- (select _FH_inv_2 i1))) 0)))))
real 0.14
user 0.13
sys 0.01
array_doub_access_init.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<(2*_FH_inv_1)    select(_FH_inv_0, i1)>=0]    i1>(2*_FH_inv_2)])

SAMPLING
========
unknown
real 0.13
user 0.12
sys 0.02
array_doub_access_init_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<(2*_FH_inv_1)    select(_FH_inv_0, i1)>=0]    i1>(2*_FH_inv_2)])

SAMPLING
========
unknown
real 0.15
user 0.15
sys 0.00
array_even_odd_1.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_3mod2)>=0)
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_3    select(_FH_inv_0, i1)=(select(_FH_inv_1, i1)+select(_FH_inv_2, i1))])
Added lemma for inv: (forall (INT) [||    i1<0    [+    select(_FH_inv_0, i1)    -select(_FH_inv_1, i1)    -select(_FH_inv_2, i1)]=0    (i1+(-_FH_inv_3))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= _FH_inv_3 0) (forall ((i1 Int)) (or (< i1 0) (= (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1)) (- (select _FH_inv_2 i1))) 0) (>= (+ i1 (- _FH_inv_3)) 0)))))
real 0.22
user 0.20
sys 0.01
array_even_odd_2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_3mod2)>=0)
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_3    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)    select(_FH_inv_0, i1)=select(_FH_inv_2, i1)])
Added lemma for inv: (forall (INT) [||    i1<0    (i1+(-_FH_inv_3))>=0    ((-select(_FH_inv_1, i1))+select(_FH_inv_0, i1))=0    ((-select(_FH_inv_2, i1))+select(_FH_inv_0, i1))=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= _FH_inv_3 0) (forall ((i1 Int)) (or (< i1 0) (>= (+ i1 (- _FH_inv_3)) 0) (= (+ (- (select _FH_inv_1 i1)) (select _FH_inv_0 i1)) 0) (= (+ (- (select _FH_inv_2 i1)) (select _FH_inv_0 i1)) 0)))))
real 0.22
user 0.20
sys 0.01
array_find.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    i1<0    select(_FH_inv_0, i1)!=_FH_inv_2    i1>=_FH_inv_1    (select(_FH_inv_0, _FH_inv_1)!=_FH_inv_2)&&(_FH_inv_1<_FH_inv_3)])

SAMPLING
========
unknown
real 0.14
user 0.13
sys 0.01
array_fixed_range_01.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 3 (type INT) -3 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Added lemma for inv: (select(_FH_inv_0, 1)>=0)
Added lemma for inv: (select(_FH_inv_0, 2)>=0)
Added lemma for inv: (select(_FH_inv_0, 3)>=0)
Added lemma for inv: ((select(_FH_inv_0, 0)+select(_FH_inv_0, 1))>=0)
Added lemma for inv: ((select(_FH_inv_0, 0)+select(_FH_inv_0, 2))>=0)
Added lemma for inv: ((select(_FH_inv_0, 0)+select(_FH_inv_0, 3))>=0)
Added lemma for inv: ((select(_FH_inv_0, 1)+select(_FH_inv_0, 2))>=0)
Added lemma for inv: ((select(_FH_inv_0, 1)+select(_FH_inv_0, 3))>=0)
Added lemma for inv: ((select(_FH_inv_0, 2)+select(_FH_inv_0, 3))>=0)
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))) Bool
  (and (>= (select _FH_inv_0 3) 0) (>= (select _FH_inv_0 0) 0) (>= (select _FH_inv_0 1) 0) (>= (select _FH_inv_0 2) 0)))
real 0.22
user 0.21
sys 0.01
array_fixed_range_02.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (((_FH_inv_1+(-1*_FH_inv_2))>=0)||((_FH_inv_2+(-1*_FH_inv_1))>0))
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_1))>=0)||((_FH_inv_1+(-1*_FH_inv_2))>0))
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_3+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>0]
Added lemma for inv: (select(_FH_inv_0, _FH_inv_1)>=0)
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_1+(-1*_FH_inv_2))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_3+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_3))>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    select(_FH_inv_0, _FH_inv_1)>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_1))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_1))>=0    (_FH_inv_3+(-1*_FH_inv_1))>=0    (_FH_inv_4+(-1*_FH_inv_1))>=0    (_FH_inv_1+(-1*_FH_inv_4))>0]
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_3))>=0)||((_FH_inv_3+(-1*_FH_inv_2))>0))
Added lemma for inv: (((_FH_inv_3+(-1*_FH_inv_2))>=0)||((_FH_inv_2+(-1*_FH_inv_3))>0))
Added lemma for inv: (select(_FH_inv_0, _FH_inv_2)>=0)
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_2)>=0    (_FH_inv_2+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_3))>=0    select(_FH_inv_0, _FH_inv_2)>=0    (_FH_inv_4+(-1*_FH_inv_2))>=0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_3))>=0    (_FH_inv_2+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_2))>0]
Added lemma for inv: [||    (_FH_inv_2+(-1*_FH_inv_3))>=0    (_FH_inv_4+(-1*_FH_inv_2))>=0    (_FH_inv_2+(-1*_FH_inv_4))>0]
Added lemma for inv: [||    (_FH_inv_3+(-1*_FH_inv_2))>=0    select(_FH_inv_0, _FH_inv_2)>=0    (_FH_inv_2+(-1*_FH_inv_4))>=0]
Added lemma for inv: [||    (_FH_inv_3+(-1*_FH_inv_2))>=0    select(_FH_inv_0, _FH_inv_2)>=0    (_FH_inv_4+(-1*_FH_inv_2))>=0]
Added lemma for inv: [||    (_FH_inv_3+(-1*_FH_inv_2))>=0    (_FH_inv_2+(-1*_FH_inv_4))>=0    (_FH_inv_4+(-1*_FH_inv_2))>0]
Added lemma for inv: [||    (_FH_inv_3+(-1*_FH_inv_2))>=0    (_FH_inv_4+(-1*_FH_inv_2))>=0    (_FH_inv_2+(-1*_FH_inv_4))>0]
Added lemma for inv: (select(_FH_inv_0, _FH_inv_3)>=0)
Added lemma for inv: ((select(_FH_inv_0, _FH_inv_3)>=0)||((_FH_inv_3+(-1*_FH_inv_4))>=0))
Added lemma for inv: (((_FH_inv_3+(-1*_FH_inv_4))>=0)||((_FH_inv_4+(-1*_FH_inv_3))>0))
Added lemma for inv: ((select(_FH_inv_0, _FH_inv_3)>=0)||((_FH_inv_4+(-1*_FH_inv_3))>=0))
Added lemma for inv: (((_FH_inv_4+(-1*_FH_inv_3))>=0)||((_FH_inv_3+(-1*_FH_inv_4))>0))
Added lemma for inv: (select(_FH_inv_0, _FH_inv_4)>=0)
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= (select _FH_inv_0 _FH_inv_4) 0) (or (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_1)) 0)) (or (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) 0) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_1)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) 0) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_1)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_1)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_1)) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_1)) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_1)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_1)) 0) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_1)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_1 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_1)) 0) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_1)) 0) (>= (select _FH_inv_0 _FH_inv_1) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_1)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_2) 0) (>= (+ _FH_inv_2 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_2 (* (- 1) _FH_inv_3)) 0) (>= (select _FH_inv_0 _FH_inv_2) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_2)) 0)) (or (>= (+ _FH_inv_3 (* (- 1) _FH_inv_2)) 0) (>= (select _FH_inv_0 _FH_inv_2) 0) (>= (+ _FH_inv_2 (* (- 1) _FH_inv_4)) 0)) (or (>= (+ _FH_inv_3 (* (- 1) _FH_inv_2)) 0) (>= (select _FH_inv_0 _FH_inv_2) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_2)) 0)) (or (>= (select _FH_inv_0 _FH_inv_3) 0) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_4)) 0)) (or (>= (select _FH_inv_0 _FH_inv_3) 0) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_3)) 0))))
real 1.52
user 1.52
sys 0.01
array_index_compl.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
- - - Bootstrapped cand for inv: (_FH_inv_1>=0)

SAMPLING
========
unknown
real 0.11
user 0.12
sys 0.00
array_init_add.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    fail    i1<0    i1>=_FH_inv_1    select(_FH_inv_0, i1)=i1])

SAMPLING
========
unknown
real 0.13
user 0.13
sys 0.00
array_init_add_three.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    fail    i1<0    i1>=_FH_inv_3    select(_FH_inv_0, i1)>0])

SAMPLING
========
unknown
real 0.19
user 0.19
sys 0.00
array_init_add_two.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 
freqhorn: /home/darin/aeval/include/deep/RndLearner.hpp:921: void ufo::RndLearner::printSolution(bool): Assertion `hasOnlyVars(res, ruleManager.invVars[rel])' failed.
./runboot_univ_ablative.sh: line 20: 2530977 Aborted                 timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.14
user 0.12
sys 0.02
array_init_batches.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_1mod2)=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_1mod2)>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=(_FH_inv_1+1)    select(_FH_inv_0, i1)=0])

SAMPLING
========
unknown
real 0.14
user 0.13
sys 0.01
array_init_batches_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: ((_FH_inv_1mod2)=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
Added lemma for inv: ((_FH_inv_1mod2)>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)=0    i1>=(_FH_inv_1+1)])

SAMPLING
========
unknown
real 0.16
user 0.15
sys 0.02
array_init_batches_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_1mod2)=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_1mod2)>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=(_FH_inv_1+1)    select(_FH_inv_0, i1)=0])

SAMPLING
========
unknown
real 0.12
user 0.12
sys 0.00
array_init_both_ends.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2=(select(_FH_inv_0, i1)+select(_FH_inv_0, _FH_inv_2+(-i1)))])

SAMPLING
========
unknown
real 0.13
user 0.11
sys 0.02
array_init_both_ends2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2=(select(_FH_inv_0, i1)+select(_FH_inv_0, _FH_inv_2+(-i1)))])

SAMPLING
========
unknown
real 0.13
user 0.12
sys 0.01
array_init_both_ends_simpl.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2=(select(_FH_inv_0, i1)+select(_FH_inv_0, _FH_inv_2+(-i1)))])
Added lemma for inv: (forall (INT) [||    i1<=0    [+    _FH_inv_2    -select(_FH_inv_0, i1)    -select(_FH_inv_0, _FH_inv_2+(-i1))]=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (= (let ((a!1 (- (select _FH_inv_0 (+ _FH_inv_2 (- i1))))))
  (+ _FH_inv_2 (- (select _FH_inv_0 i1)) a!1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.19
user 0.17
sys 0.02
array_init_both_ends_simpl_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2=(select(_FH_inv_0, i1)+select(_FH_inv_0, _FH_inv_2+(-i1)))])
Added lemma for inv: (forall (INT) [||    i1<=0    [+    _FH_inv_2    -select(_FH_inv_0, i1)    -select(_FH_inv_0, _FH_inv_2+(-i1))]=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) (- 100000)) (forall ((i1 Int)) (or (<= i1 0) (= (let ((a!1 (- (select _FH_inv_0 (+ _FH_inv_2 (- i1))))))
  (+ _FH_inv_2 (- (select _FH_inv_0 i1)) a!1)) 0) (>= (+ i1 (- _FH_inv_1)) 0))) (= (+ _FH_inv_2 (- 100000)) 0)))
real 0.20
user 0.20
sys 0.00
array_init_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)=1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)=1    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (= (select _FH_inv_0 i1) 1) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.12
user 0.13
sys 0.00
array_init_const_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=1])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)=1    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) (- 100000)) (forall ((i1 Int)) (or (= (select _FH_inv_0 i1) 1) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0))) (= (+ _FH_inv_2 (- 100000)) 0)))
real 0.14
user 0.14
sys 0.00
array_init_const_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=1])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)=1    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (= (select _FH_inv_0 i1) 1) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.11
user 0.11
sys 0.00
array_init_depend.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)=_FH_inv_2    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, i1)+(-_FH_inv_2))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (< i1 0) (= (+ (select _FH_inv_0 i1) (- _FH_inv_2)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.17
user 0.16
sys 0.01
array_init_depend_incr.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=(_FH_inv_2+i1)])

SAMPLING
========
unknown
real 0.18
user 0.16
sys 0.01
array_init_disj.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)!=1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    select(_FH_inv_0, i1)<1    select(_FH_inv_0, i1)>1    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (< (select _FH_inv_0 i1) 1) (> (select _FH_inv_0 i1) 1) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.14
user 0.13
sys 0.00
array_init_disj_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)!=1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    select(_FH_inv_0, i1)<1    select(_FH_inv_0, i1)>1    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= (+ _FH_inv_1 (* (- 1) _FH_inv_2)) (- 100000)) (forall ((i1 Int)) (or (<= i1 0) (< (select _FH_inv_0 i1) 1) (> (select _FH_inv_0 i1) 1) (>= (+ i1 (- _FH_inv_1)) 0))) (= (+ _FH_inv_2 (- 100000)) 0)))
real 0.16
user 0.16
sys 0.00
array_init_double.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_2    _FH_inv_3=(select(_FH_inv_0, i1)+select(_FH_inv_1, i1))])
Added lemma for inv: (forall (INT) [||    i1<=0    [+    _FH_inv_3    -select(_FH_inv_0, i1)    -select(_FH_inv_1, i1)]=0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (<= i1 0) (= (+ _FH_inv_3 (- (select _FH_inv_0 i1)) (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.15
user 0.14
sys 0.01
array_init_double_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 777777 (type INT) -777777 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (777777=_FH_inv_3)
Added lemma for inv: ((-1*_FH_inv_3)=-777777)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=-777777)
Added lemma for inv: (_FH_inv_3>=777777)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=777777)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=-777777)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_2    _FH_inv_3=(select(_FH_inv_0, i1)+select(_FH_inv_1, i1))])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_2))>=0    [+    _FH_inv_3    -select(_FH_inv_1, i1)    -select(_FH_inv_0, i1)]=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= (+ _FH_inv_2 (* (- 1) _FH_inv_3)) (- 777777)) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_2)) 0) (= (+ _FH_inv_3 (- (select _FH_inv_1 i1)) (- (select _FH_inv_0 i1))) 0))) (= (+ _FH_inv_3 (- 777777)) 0)))
real 0.18
user 0.18
sys 0.00
array_init_drop.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)=0)
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Added lemma for inv: ((-1*select(_FH_inv_0, 0))>=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_1+(-1*select(_FH_inv_0, 0)))>=0)
Added lemma for inv: ((_FH_inv_1+select(_FH_inv_0, 0))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)<=i1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, i1)+(-i1))<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= (* (- 1) (select _FH_inv_0 0)) 0) (>= (select _FH_inv_0 0) 0) (>= (+ _FH_inv_1 (select _FH_inv_0 0)) 0) (forall ((i1 Int)) (or (< i1 0) (<= (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.20
user 0.21
sys 0.00
array_init_ite.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=i1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (= (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.88
user 0.90
sys 0.01
array_init_ite_dupl.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=_FH_inv_2])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, i1)+(-_FH_inv_2))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (>= _FH_inv_1 0) (forall ((i1 Int)) (or (< i1 0) (= (+ (select _FH_inv_0 i1) (- _FH_inv_2)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.27
user 0.27
sys 0.01
array_init_ite_jump.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 7 (type INT) -7 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (7=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-7)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-7)
Added lemma for inv: (_FH_inv_2>=7)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=7)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-7)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>_FH_inv_1    select(_FH_inv_0, i1)!=_FH_inv_2])

SAMPLING
========
unknown
real 0.18
user 0.18
sys 0.00
array_init_ite_jump_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 7 (type INT) -7 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (7=_FH_inv_2)
Added lemma for inv: (100000=_FH_inv_3)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))=-100007)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))=99993)
Added lemma for inv: ((-1*_FH_inv_2)=-7)
Added lemma for inv: ((-1*_FH_inv_3)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-7)
Added lemma for inv: (_FH_inv_2>=7)
Added lemma for inv: ((-1*_FH_inv_3)>=-100000)
Added lemma for inv: (_FH_inv_3>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=7)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-7)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=-100000)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))>=-100007)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=100007)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))>=99993)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=-99993)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)!=_FH_inv_2    i1>_FH_inv_1])

SAMPLING
========
unknown
real 0.22
user 0.21
sys 0.01
array_init_ite_jump_two.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 10 (type INT) -10 (type INT) 1 (type INT) -1 (type INT) 13 (type INT) -13 (type INT) 7 (type INT) -7 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (7=_FH_inv_2)
Added lemma for inv: (13=_FH_inv_3)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))=-20)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))=6)
Added lemma for inv: ((-1*_FH_inv_2)=-7)
Added lemma for inv: ((-1*_FH_inv_3)=-13)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-7)
Added lemma for inv: (_FH_inv_2>=7)
Added lemma for inv: ((-1*_FH_inv_3)>=-13)
Added lemma for inv: (_FH_inv_3>=13)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=7)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-7)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=13)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=-13)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))>=-20)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=20)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))>=6)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=-6)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>_FH_inv_1    (select(_FH_inv_0, i1)!=_FH_inv_2)&&(select(_FH_inv_0, i1)!=_FH_inv_3)])

SAMPLING
========
unknown
real 0.44
user 0.43
sys 0.02
array_init_ite_jump_two_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 10 (type INT) -10 (type INT) 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 13 (type INT) -13 (type INT) 7 (type INT) -7 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (7=_FH_inv_2)
Added lemma for inv: (13=_FH_inv_3)
Added lemma for inv: (100000=_FH_inv_4)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))=-20)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))=6)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_4))=-100007)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_2))=99993)
Added lemma for inv: ((-1*_FH_inv_2)=-7)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))=-100013)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))=99987)
Added lemma for inv: ((-1*_FH_inv_3)=-13)
Added lemma for inv: ((-1*_FH_inv_4)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-7)
Added lemma for inv: (_FH_inv_2>=7)
Added lemma for inv: ((-1*_FH_inv_3)>=-13)
Added lemma for inv: (_FH_inv_3>=13)
Added lemma for inv: ((-1*_FH_inv_4)>=-100000)
Added lemma for inv: (_FH_inv_4>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=7)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-7)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=13)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=-13)
Added lemma for inv: ((_FH_inv_1+_FH_inv_4)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-100000)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))>=-20)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=20)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))>=6)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=-6)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_4))>=-100007)
Added lemma for inv: ((_FH_inv_2+_FH_inv_4)>=100007)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_2))>=99993)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_4))>=-99993)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-100013)
Added lemma for inv: ((_FH_inv_3+_FH_inv_4)>=100013)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=99987)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-99987)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>_FH_inv_1    (select(_FH_inv_0, i1)!=_FH_inv_2)&&(select(_FH_inv_0, i1)!=_FH_inv_3)])

SAMPLING
========
unknown
real 0.57
user 0.56
sys 0.01
array_init_monot_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 2 (type INT) -2 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=select(_FH_inv_0, 0))
Added lemma for inv: (1=select(_FH_inv_0, 1))
Added lemma for inv: (_FH_inv_1>=2)
Added lemma for inv: ((-1*select(_FH_inv_0, 0))>=0)
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Added lemma for inv: ((-1*select(_FH_inv_0, 1))>=-1)
Added lemma for inv: (select(_FH_inv_0, 1)>=1)
Added lemma for inv: ((_FH_inv_1+select(_FH_inv_0, 0))>=2)
Added lemma for inv: ((_FH_inv_1+(-1*select(_FH_inv_0, 0)))>=2)
Added lemma for inv: ((_FH_inv_1+select(_FH_inv_0, 1))>=3)
Added lemma for inv: ((_FH_inv_1+(-1*select(_FH_inv_0, 1)))>=1)
Added lemma for inv: (((-1*select(_FH_inv_0, 0))+(-1*select(_FH_inv_0, 1)))>=-1)
Added lemma for inv: ((select(_FH_inv_0, 0)+select(_FH_inv_0, 1))>=1)
Added lemma for inv: ((select(_FH_inv_0, 1)+(-1*select(_FH_inv_0, 0)))>=1)
Added lemma for inv: ((select(_FH_inv_0, 0)+(-1*select(_FH_inv_0, 1)))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1+-1)<select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 1.71
user 1.70
sys 0.02
array_init_nondet_var_mult.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: (_FH_inv_2>0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)>=i1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))>=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (> _FH_inv_2 0) (>= _FH_inv_1 1) (forall ((i1 Int)) (or (<= i1 0) (>= (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.14
user 0.14
sys 0.00
array_init_nondet_vars.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: (_FH_inv_2>0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)>=(i1+2)])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))>=2    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (> _FH_inv_2 0) (>= _FH_inv_1 1) (forall ((i1 Int)) (or (<= i1 0) (>= (+ (select _FH_inv_0 i1) (- i1)) 2) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.15
user 0.13
sys 0.02
array_init_nondet_vars2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (0>_FH_inv_3)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((-1*_FH_inv_3)>0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)<i1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))<0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (> _FH_inv_2 0) (>= _FH_inv_1 1) (forall ((i1 Int)) (or (<= i1 0) (< (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0))) (< _FH_inv_3 0)))
real 0.15
user 0.14
sys 0.01
array_init_reverse.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=1])

SAMPLING
========
unknown
real 0.12
user 0.11
sys 0.00
array_init_reverse_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 99999 (type INT) -99999 (type INT) 100000 (type INT) -100000 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((-1*_FH_inv_1)>=-99999)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_1))>=-199999)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=1])

SAMPLING
========
unknown
real 0.13
user 0.13
sys 0.00
array_init_select.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_2    select(_FH_inv_0, i1)>=0])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (< i1 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.18
user 0.17
sys 0.01
array_init_select_copy.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)>=0    i1>=_FH_inv_2])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (< i1 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.23
user 0.23
sys 0.00
array_init_tuples.smt2

INITIALIZE PREDICATE inv1
====================
extract_consts found: 3 (type INT) -3 (type INT) 4 (type INT) -4 (type INT) 5 (type INT) -5 (type INT) 1 (type INT) -1 (type INT) 6 (type INT) -6 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv1
===========

BOOTSTRAPPING
=============
Added lemma for inv1: ((_FH_inv1_1mod6)=0)
Added lemma for inv1: (_FH_inv1_1>=0)
Added lemma for inv1: ((_FH_inv1_1mod6)>=0)
Added lemma for inv1: ((-1*(_FH_inv1_1mod6))>=0)
Added lemma for inv1: ((-1*(_FH_inv1_1mod6))>=-1)
- - - Bootstrapped cand for inv1: (forall (INT) [||    0>i1    select(_FH_inv1_0, i1)>=0    i1>=(_FH_inv1_1+5)])

SAMPLING
========
unknown
real 186.45
user 185.64
sys 0.78
array_init_tuples_relative.smt2

INITIALIZE PREDICATE inv1
====================
extract_consts found: 4 (type INT) -4 (type INT) 3 (type INT) -3 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv1
===========

BOOTSTRAPPING
=============
Added lemma for inv1: ((_FH_inv1_1mod4)=0)
Added lemma for inv1: (_FH_inv1_1>=0)
Added lemma for inv1: (_FH_inv1_2>=0)
Added lemma for inv1: (_FH_inv1_3>=0)
Added lemma for inv1: (_FH_inv1_4>=0)
Added lemma for inv1: (_FH_inv1_5>=0)
Added lemma for inv1: ((_FH_inv1_1+_FH_inv1_2)>=0)
Added lemma for inv1: ((_FH_inv1_1+(-1*_FH_inv1_2))>=0)
Added lemma for inv1: ((_FH_inv1_1+_FH_inv1_3)>=0)
Added lemma for inv1: ((_FH_inv1_1+(-1*_FH_inv1_3))>=0)
Added lemma for inv1: ((_FH_inv1_1+_FH_inv1_4)>=0)
Added lemma for inv1: ((_FH_inv1_1+(-1*_FH_inv1_4))>=0)
Added lemma for inv1: ((_FH_inv1_1+_FH_inv1_5)>=0)
Added lemma for inv1: ((_FH_inv1_1+(-1*_FH_inv1_5))>=0)
Added lemma for inv1: ((_FH_inv1_2+_FH_inv1_3)>=0)
Added lemma for inv1: ((_FH_inv1_2+(-1*_FH_inv1_3))>=0)
Added lemma for inv1: ((_FH_inv1_2+_FH_inv1_4)>=0)
Added lemma for inv1: ((_FH_inv1_2+(-1*_FH_inv1_4))>=0)
Added lemma for inv1: ((_FH_inv1_2+_FH_inv1_5)>=0)
Added lemma for inv1: ((_FH_inv1_2+(-1*_FH_inv1_5))>=0)
Added lemma for inv1: ((_FH_inv1_3+_FH_inv1_4)>=0)
Added lemma for inv1: ((_FH_inv1_3+(-1*_FH_inv1_4))>=0)
Added lemma for inv1: ((_FH_inv1_3+_FH_inv1_5)>=0)
Added lemma for inv1: ((_FH_inv1_3+(-1*_FH_inv1_5))>=0)
Added lemma for inv1: ((_FH_inv1_4+_FH_inv1_5)>=0)
Added lemma for inv1: ((_FH_inv1_4+(-1*_FH_inv1_5))>=0)
Added lemma for inv1: ((_FH_inv1_1mod4)>=0)
Added lemma for inv1: ((-1*(_FH_inv1_1mod4))>=0)
Added lemma for inv1: ((-1*(_FH_inv1_1mod4))>=-1)
- - - Bootstrapped cand for inv1: (forall (INT) [||    0>i1    i1>=(_FH_inv1_1+3)    select(_FH_inv1_0, i1)>=0])

SAMPLING
========
unknown
real 37.17
user 36.98
sys 0.19
array_init_upto_nondet.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0<=_FH_inv_3)
Added lemma for inv: (_FH_inv_3<_FH_inv_2)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=i1])

SAMPLING
========
unknown
real 0.18
user 0.17
sys 0.01
array_init_var.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)=i1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (= (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.13
user 0.11
sys 0.02
array_init_var_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)=i1    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-i1))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (= (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.11
user 0.10
sys 0.01
array_init_var_plus.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)>=0])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_1 0) (>= _FH_inv_2 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.15
user 0.15
sys 0.00
array_init_var_plus_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)>=0    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (>= _FH_inv_2 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.14
user 0.12
sys 0.01
array_init_var_plus_ind2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)>=_FH_inv_3])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_1))>=0    (select(_FH_inv_0, i1)+(-_FH_inv_3))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= (+ (* (- 1) _FH_inv_2) (* (- 1) _FH_inv_3)) 0) (>= _FH_inv_1 0) (>= (+ _FH_inv_2 _FH_inv_3) 0) (>= (+ _FH_inv_2 (* (- 1) _FH_inv_3)) 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0) (>= (+ (select _FH_inv_0 i1) (- _FH_inv_3)) 0)))))
real 0.18
user 0.17
sys 0.01
array_init_var_plus_ind3.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 3 (type INT) -3 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    3>=i1    0>=select(_FH_inv_0, i1)    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=3    select(_FH_inv_0, i1)<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 3) (<= (select _FH_inv_0 i1) 0) (>= (+ i1 (- _FH_inv_1)) 0))) (<= _FH_inv_2 0)))
real 0.14
user 0.12
sys 0.01
array_min.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2<=select(_FH_inv_0, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (_FH_inv_2+(-select(_FH_inv_0, i1)))<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (<= (+ _FH_inv_2 (- (select _FH_inv_0 i1))) 0) (>= (+ i1 (- _FH_inv_1)) 0))) (<= _FH_inv_2 0)))
real 0.20
user 0.19
sys 0.01
array_min_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 10000 (type INT) -10000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=-10000)
Added lemma for inv: (_FH_inv_3>=10000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=10000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=-10000)
Added lemma for inv: (((-1*_FH_inv_2)+(-1*_FH_inv_3))>=-10000)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))>=10000)
Added lemma for inv: (10000=_FH_inv_3)
Added lemma for inv: ((-1*_FH_inv_3)=-10000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2<=select(_FH_inv_0, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (_FH_inv_2+(-select(_FH_inv_0, i1)))<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= (+ _FH_inv_1 (* (- 1) _FH_inv_3)) (- 10000)) (>= (+ _FH_inv_3 (* (- 1) _FH_inv_2)) 10000) (forall ((i1 Int)) (or (<= i1 0) (<= (+ _FH_inv_2 (- (select _FH_inv_0 i1))) 0) (>= (+ i1 (- _FH_inv_1)) 0))) (= (+ _FH_inv_3 (- 10000)) 0)))
real 0.25
user 0.25
sys 0.00
array_min_ind.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    _FH_inv_2<=select(_FH_inv_0, i1)])
Added lemma for inv: (forall (INT) [||    i1<=0    (i1+(-_FH_inv_1))>=0    (_FH_inv_2+(-select(_FH_inv_0, i1)))<=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0) (<= (+ _FH_inv_2 (- (select _FH_inv_0 i1))) 0))) (<= _FH_inv_2 0)))
real 0.18
user 0.18
sys 0.00
array_min_max.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=0)
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_3))>=0)||((_FH_inv_4+(-1*_FH_inv_1))>0))
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= _FH_inv_1 0) (>= _FH_inv_2 0) (<= _FH_inv_3 0)))
real 0.41
user 0.41
sys 0.00
array_min_max_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-100000)
Added lemma for inv: (_FH_inv_4>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_4)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-100000)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_2+_FH_inv_4)>=100000)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_4))>=-100000)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-100000)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=100000)
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_3))>=0)||((_FH_inv_4+(-1*_FH_inv_1))>0))
Added lemma for inv: (100000=_FH_inv_4)
Added lemma for inv: ((-1*_FH_inv_4)=-100000)
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= (+ _FH_inv_1 (* (- 1) _FH_inv_4)) (- 100000)) (>= (+ _FH_inv_2 (* (- 1) _FH_inv_4)) (- 100000)) (>= (+ _FH_inv_4 (* (- 1) _FH_inv_3)) 100000) (= (+ _FH_inv_4 (- 100000)) 0)))
real 0.48
user 0.47
sys 0.01
array_min_swap.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2534612 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.22
user 0.21
sys 0.02
array_min_swap_and_shift.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=1)
Added lemma for inv: ((-1*_FH_inv_3)>0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=0)
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_1))>0)||((_FH_inv_1+(-1*_FH_inv_2))>0))
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_3<0)
Added lemma for inv: (_FH_inv_2!=_FH_inv_1)
- - - Bootstrapped cand for inv: (forall (INT) [||    i1>=_FH_inv_2    _FH_inv_2>=i1    select(_FH_inv_0, _FH_inv_1)<select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.29
user 0.28
sys 0.01
array_min_swap_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 100000 (type INT) -100000 (type INT) 
./runboot_univ_ablative.sh: line 20: 2534623 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.26
user 0.25
sys 0.02
array_nonlin_init_depend.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=(_FH_inv_2+(i1*_FH_inv_3))])

SAMPLING
========
unknown
real 0.23
user 0.22
sys 0.00
array_nonlin_init_mult.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)>=0    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.13
user 0.12
sys 0.00
array_nonlin_square.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (((select(_FH_inv_0, _FH_inv_1)*select(_FH_inv_0, _FH_inv_1))+(-1*select(_FH_inv_0, _FH_inv_1)))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)>=0])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)>=0    i1<=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (>= (select _FH_inv_0 i1) 0) (<= i1 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.13
user 0.10
sys 0.02
array_partial_init.smt2

INITIALIZE PREDICATE inv1
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv1
===========

BOOTSTRAPPING
=============
Added lemma for inv1: (_FH_inv1_3>=0)
Added lemma for inv1: (_FH_inv1_5>=0)
Added lemma for inv1: ((_FH_inv1_3+_FH_inv1_5)>=0)
Added lemma for inv1: ((_FH_inv1_3+(-1*_FH_inv1_5))>=0)
- - - Bootstrapped cand for inv1: (forall (INT) [||    0>i1    select(_FH_inv1_2, i1)>=i1    i1>=_FH_inv1_5])
Added lemma for inv1: (forall (INT) [||    i1<0    (select(_FH_inv1_2, i1)+(-i1))>=0    (i1+(-_FH_inv1_5))>=0])
Success after bootstrapping
(define-fun inv1 ((_FH_inv1_0 (Array Int Int))(_FH_inv1_1 (Array Int Int))(_FH_inv1_2 (Array Int Int))(_FH_inv1_3 Int)(_FH_inv1_4 Int)(_FH_inv1_5 Int)) Bool
  (and (>= _FH_inv1_5 0) (>= (+ _FH_inv1_3 (* (- 1) _FH_inv1_5)) 0) (forall ((i1 Int)) (or (< i1 0) (>= (+ (select _FH_inv1_2 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv1_5)) 0)))))
real 0.25
user 0.25
sys 0.01
array_password_naive.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, _FH_inv_2)!=select(_FH_inv_1, _FH_inv_2)    i1>=_FH_inv_2    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, _FH_inv_2)+(-select(_FH_inv_1, _FH_inv_2)))<0    (select(_FH_inv_0, _FH_inv_2)+(-select(_FH_inv_1, _FH_inv_2)))>0    (i1+(-_FH_inv_2))>=0    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (< i1 0) (< (+ (select _FH_inv_0 _FH_inv_2) (- (select _FH_inv_1 _FH_inv_2))) 0) (> (+ (select _FH_inv_0 _FH_inv_2) (- (select _FH_inv_1 _FH_inv_2))) 0) (>= (+ i1 (- _FH_inv_2)) 0) (= (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0)))))
real 0.15
user 0.14
sys 0.01
array_password_standard.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((-1*_FH_inv_3)>=-1)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_2+_FH_inv_3)>=1)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_3))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    1!=_FH_inv_3    i1>=_FH_inv_2    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<0    _FH_inv_3<1    _FH_inv_3>1    (select(_FH_inv_0, i1)+(-select(_FH_inv_1, i1)))=0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= (+ _FH_inv_2 _FH_inv_3) 1) (forall ((i1 Int)) (or (< i1 0) (< _FH_inv_3 1) (> _FH_inv_3 1) (= (+ (select _FH_inv_0 i1) (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0))) (<= _FH_inv_3 1)))
real 0.21
user 0.21
sys 0.00
array_single_elem.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 143 (type INT) -143 (type INT) 1 (type INT) -1 (type INT) 150 (type INT) -150 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>150)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>150)
- - - Bootstrapped cand for inv: (select(_FH_inv_0, 143)=0)

SAMPLING
========
unknown
real 0.15
user 0.14
sys 0.01
array_single_elem_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 143 (type INT) -143 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 150 (type INT) -150 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((-_FH_inv_2)=-100000)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (select(_FH_inv_0, 143)=0)

SAMPLING
========
unknown
real 0.18
user 0.17
sys 0.01
array_single_elem_increm.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))) Bool
  (>= (select _FH_inv_0 0) 0))
real 0.08
user 0.06
sys 0.01
array_split_01.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 500 (type INT) -500 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    500>i1    i1>=_FH_inv_2    i1=select(_FH_inv_1, i1)])
Added lemma for inv: (forall (INT) [||    i1<500    (i1+(-select(_FH_inv_1, i1)))=0    (i1+(-_FH_inv_2))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 Int)(_FH_inv_3 Int)) Bool
  (and (>= _FH_inv_2 0) (forall ((i1 Int)) (or (< i1 500) (= (+ i1 (- (select _FH_inv_1 i1))) 0) (>= (+ i1 (- _FH_inv_2)) 0)))))
real 0.18
user 0.18
sys 0.00
array_split_02.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 50 (type INT) -50 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    50>=i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)>i1])
Added lemma for inv: (forall (INT) [||    i1<=50    (select(_FH_inv_0, i1)+(-i1))>0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 50) (> (+ (select _FH_inv_0 i1) (- i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.16
user 0.15
sys 0.00
array_split_03.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 100 (type INT) -100 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100)
Added lemma for inv: ((-1*_FH_inv_2)>=-100)
- - - Bootstrapped cand for inv: (forall (INT) [||    i1<0    i1>=_FH_inv_1    select(_FH_inv_0, i1)=select(_FH_inv_0, i1+_FH_inv_2)])

SAMPLING
========
unknown
real 0.21
user 0.21
sys 0.00
array_split_04.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 10 (type INT) -10 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)=1)
Added lemma for inv: (select(_FH_inv_0, 0)>=1)
Added lemma for inv: ((-1*select(_FH_inv_0, 0))>=-1)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((_FH_inv_1+(-1*select(_FH_inv_0, 0)))>=0)
Added lemma for inv: ((_FH_inv_1+select(_FH_inv_0, 0))>=2)
- - - Bootstrapped cand for inv: (forall (INT) [||    10>i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)<=0])

SAMPLING
========
unknown
real 0.23
user 0.22
sys 0.01
array_split_05.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2534693 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.15
user 0.14
sys 0.02
array_split_06.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 10 (type INT) -10 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    10>i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=10])
Added lemma for inv: (forall (INT) [||    select(_FH_inv_0, i1)=10    i1<10    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_1 0) (forall ((i1 Int)) (or (= (select _FH_inv_0 i1) 10) (< i1 10) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.16
user 0.16
sys 0.00
array_split_07.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 100 (type INT) -100 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    100>i1    i1>=_FH_inv_3    select(_FH_inv_1, i1)=select(_FH_inv_2, i1)])
Added lemma for inv: (forall (INT) [||    i1<100    (select(_FH_inv_1, i1)+(-select(_FH_inv_2, i1)))=0    (i1+(-_FH_inv_3))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)(_FH_inv_4 Int)) Bool
  (and (>= _FH_inv_3 0) (forall ((i1 Int)) (or (< i1 100) (= (+ (select _FH_inv_1 i1) (- (select _FH_inv_2 i1))) 0) (>= (+ i1 (- _FH_inv_3)) 0)))))
real 0.18
user 0.18
sys 0.00
array_split_08.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 99 (type INT) -99 (type INT) -1 (type INT) 1 (type INT) 100 (type INT) -100 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (const-array(INT, 0)=_FH_inv_0)
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    100>i1    99=select(_FH_inv_1, i1)    i1>=_FH_inv_2])

SAMPLING
========
unknown
real 0.22
user 0.22
sys 0.00
array_split_09.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 0 (type INT) 0 (type INT) -1 (type INT) 1 (type INT) 9 (type INT) -9 (type INT) 10 (type INT) -10 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (const-array(INT, 1)=_FH_inv_0)
Added lemma for inv: (const-array(INT, -1)=_FH_inv_1)
Added lemma for inv: (_FH_inv_3>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    10>i1    i1>=_FH_inv_3    9=select(_FH_inv_2, i1)])

SAMPLING
========
unknown
real 0.73
user 0.71
sys 0.02
array_split_10.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 50 (type INT) -50 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=50)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=50)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=-50)
- - - Bootstrapped cand for inv: (forall (INT) [||    50>i1    i1>=_FH_inv_2    0=select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.21
user 0.20
sys 0.01
array_split_11.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_5>0)
Added lemma for inv: (_FH_inv_4>=0)
Added lemma for inv: (_FH_inv_5>0)
- - - Bootstrapped cand for inv: (select(_FH_inv_1, 0)<=select(_FH_inv_1, (2*_FH_inv_5)+-1))

SAMPLING
========
unknown
real 3.99
user 3.97
sys 0.03
array_split_12.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 500 (type INT) -500 (type INT) 0 (type INT) 0 (type INT) 1000 (type INT) -1000 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=1000)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=-1000)
- - - Bootstrapped cand for inv: (forall (INT) [||    500>i1    i1>=_FH_inv_2    (2*i1)=select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.20
user 0.19
sys 0.02
array_split_13.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -2 (type INT) 2 (type INT) 50 (type INT) -50 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 150 (type INT) -150 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=-150)
Added lemma for inv: ((_FH_inv_1mod2)>=0)
Added lemma for inv: ((-1*(_FH_inv_1mod2))>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    50>=i1    i1=select(_FH_inv_0, i1)    i1>=_FH_inv_2])

SAMPLING
========
unknown
real 0.21
user 0.20
sys 0.00
array_split_14.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 55 (type INT) -55 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 54 (type INT) -54 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((-1*_FH_inv_1)>=-54)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=54)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=-54)
- - - Bootstrapped cand for inv: (forall (INT) [||    55>=i1    i1>=_FH_inv_2    _FH_inv_1<select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.25
user 0.24
sys 0.01
array_split_15.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 11 (type INT) -11 (type INT) 100 (type INT) -100 (type INT) 10 (type INT) -10 (type INT) -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)=0)
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Added lemma for inv: ((-1*select(_FH_inv_0, 0))>=0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((_FH_inv_1+(-1*select(_FH_inv_0, 0)))>=1)
Added lemma for inv: ((_FH_inv_1+select(_FH_inv_0, 0))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    11>=i1    select(_FH_inv_0, i1)=100    i1>=_FH_inv_1])

SAMPLING
========
unknown
real 0.24
user 0.23
sys 0.01
array_split_16.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 100 (type INT) -100 (type INT) 10 (type INT) -10 (type INT) 0 (type INT) 0 (type INT) -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    10>i1    i1>=_FH_inv_1    select(_FH_inv_0, i1)=100])

SAMPLING
========
unknown
real 0.18
user 0.17
sys 0.01
array_split_17.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) -1 (type INT) 1 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2534955 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.16
user 0.15
sys 0.01
array_split_18.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 500 (type INT) -500 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_4)
Added lemma for inv: ((-1*_FH_inv_4)=0)
Added lemma for inv: ((-1*_FH_inv_4)>=0)
Added lemma for inv: (_FH_inv_4>=0)
Added lemma for inv: (_FH_inv_5>=1)
Added lemma for inv: ((_FH_inv_4+_FH_inv_5)>=1)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_4))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    500>i1    i1>=_FH_inv_5    select(_FH_inv_3, i1)=[+    select(_FH_inv_0, i1)    select(_FH_inv_1, i1)    select(_FH_inv_2, i1)]])
Added lemma for inv: (forall (INT) [||    i1<500    (i1+(-_FH_inv_5))>=0    [+    select(_FH_inv_3, i1)    -select(_FH_inv_2, i1)    -select(_FH_inv_1, i1)    -select(_FH_inv_0, i1)]=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 (Array Int Int))(_FH_inv_4 Int)(_FH_inv_5 Int)(_FH_inv_6 Int)) Bool
  (and (>= (+ _FH_inv_5 (* (- 1) _FH_inv_4)) 1) (forall ((i1 Int)) (or (< i1 500) (>= (+ i1 (- _FH_inv_5)) 0) (= (+ (select _FH_inv_3 i1)
   (- (select _FH_inv_2 i1))
   (- (select _FH_inv_1 i1))
   (- (select _FH_inv_0 i1))) 0))) (= _FH_inv_4 0)))
real 0.24
user 0.24
sys 0.00
array_split_19.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 500 (type INT) -500 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: (_FH_inv_4>=1)
Added lemma for inv: ((_FH_inv_3+_FH_inv_4)>=1)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    500>i1    i1>=_FH_inv_4    select(_FH_inv_2, i1)=(select(_FH_inv_0, i1)+select(_FH_inv_1, i1))])
Added lemma for inv: (forall (INT) [||    i1<500    (i1+(-_FH_inv_4))>=0    [+    select(_FH_inv_2, i1)    -select(_FH_inv_1, i1)    -select(_FH_inv_0, i1)]=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 (Array Int Int))(_FH_inv_2 (Array Int Int))(_FH_inv_3 Int)(_FH_inv_4 Int)(_FH_inv_5 Int)) Bool
  (and (>= (+ _FH_inv_4 (* (- 1) _FH_inv_3)) 1) (forall ((i1 Int)) (or (< i1 500) (>= (+ i1 (- _FH_inv_4)) 0) (= (+ (select _FH_inv_2 i1) (- (select _FH_inv_1 i1)) (- (select _FH_inv_0 i1))) 0))) (= _FH_inv_3 0)))
real 0.22
user 0.20
sys 0.02
array_split_20.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_0, 0)>=0)
Added lemma for inv: ((-1*select(_FH_inv_0, 0))>=0)
Added lemma for inv: (_FH_inv_3>=1)
Added lemma for inv: ((_FH_inv_3+(-1*select(_FH_inv_0, 0)))>=1)
Added lemma for inv: ((_FH_inv_3+select(_FH_inv_0, 0))>=1)
Added lemma for inv: (select(_FH_inv_0, 0)=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    _FH_inv_3>i1    i1>=(2*_FH_inv_4)    [&&    i1>=0    i1<_FH_inv_3    select(_FH_inv_0, i1)=(select(_FH_inv_1, i1)+select(_FH_inv_2, i1))]])

SAMPLING
========
unknown
real 38.12
user 37.89
sys 0.22
array_split_21.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (select(_FH_inv_1, 0)>=0)
Added lemma for inv: ((-1*select(_FH_inv_1, 0))>=0)
Added lemma for inv: (_FH_inv_2>=1)
Added lemma for inv: ((_FH_inv_2+(-1*select(_FH_inv_1, 0)))>=1)
Added lemma for inv: ((_FH_inv_2+select(_FH_inv_1, 0))>=1)
Added lemma for inv: (select(_FH_inv_1, 0)=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    _FH_inv_2>i1    i1>=(2*_FH_inv_3)    [&&    i1>=0    i1<_FH_inv_2    select(_FH_inv_1, i1)=select(_FH_inv_0, i1)]])

SAMPLING
========
unknown
real 3.38
user 3.37
sys 0.02
array_standard_partition.smt2

INITIALIZE PREDICATE inv1
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv1
===========

BOOTSTRAPPING
=============
Added lemma for inv1: (_FH_inv1_2>=0)
Added lemma for inv1: (_FH_inv1_4>=0)
Added lemma for inv1: ((_FH_inv1_2+_FH_inv1_4)>=0)
Added lemma for inv1: ((_FH_inv1_2+(-1*_FH_inv1_4))>=0)
- - - Bootstrapped cand for inv1: (forall (INT) [||    0>i1    0>=select(_FH_inv1_1, i1)    i1>=_FH_inv1_4])
Added lemma for inv1: (forall (INT) [||    i1<0    select(_FH_inv1_1, i1)<=0    (i1+(-_FH_inv1_4))>=0])
Success after bootstrapping
(define-fun inv1 ((_FH_inv1_0 (Array Int Int))(_FH_inv1_1 (Array Int Int))(_FH_inv1_2 Int)(_FH_inv1_3 Int)(_FH_inv1_4 Int)) Bool
  (and (>= _FH_inv1_4 0) (>= (+ _FH_inv1_2 (* (- 1) _FH_inv1_4)) 0) (forall ((i1 Int)) (or (< i1 0) (<= (select _FH_inv1_1 i1) 0) (>= (+ i1 (- _FH_inv1_4)) 0)))))
real 0.23
user 0.22
sys 0.02
array_standard_password.smt2

INITIALIZE PREDICATE inv1
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv1
===========

BOOTSTRAPPING
=============
Added lemma for inv1: (_FH_inv1_2>=0)
Added lemma for inv1: ((_FH_inv1_2+_FH_inv1_3)>=0)
Added lemma for inv1: ((_FH_inv1_2+(-1*_FH_inv1_3))>=0)
Added lemma for inv1: (_FH_inv1_3>=0)
- - - Bootstrapped cand for inv1: (forall (INT) [||    0>i1    [&&    i1>=0    i1<_FH_inv1_2    select(_FH_inv1_0, i1)=select(_FH_inv1_1, i1)]    i1>=(_FH_inv1_2+-1)])

SAMPLING
========
unknown
real 0.26
user 0.24
sys 0.02
array_tiling_pnr2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -2 (type INT) 2 (type INT) 2 (type INT) -2 (type INT) 10 (type INT) -10 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: (10=_FH_inv_4)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))=10)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: ((-1*_FH_inv_4)=-10)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-10)
Added lemma for inv: (_FH_inv_4>=10)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=1)
Added lemma for inv: ((_FH_inv_1+_FH_inv_4)>=11)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-9)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_3+_FH_inv_4)>=10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=10)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-10)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=(2*_FH_inv_2)    [&&    i1>=0    i1<((2*_FH_inv_1)+-3)    select(_FH_inv_0, i1)!=0]])

SAMPLING
========
unknown
real 0.29
user 0.28
sys 0.01
array_tiling_pnr3.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -3 (type INT) 3 (type INT) 3 (type INT) -3 (type INT) -1 (type INT) 1 (type INT) 10 (type INT) -10 (type INT) 0 (type INT) 0 (type INT) -2 (type INT) 2 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-10)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-9)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=(3*_FH_inv_2)    [&&    i1>=0    i1<((3*_FH_inv_1)+-5)    select(_FH_inv_0, i1)!=_FH_inv_3]])

SAMPLING
========
unknown
real 1.14
user 1.12
sys 0.02
array_tiling_pnr4.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) -3 (type INT) 3 (type INT) -4 (type INT) 4 (type INT) 4 (type INT) -4 (type INT) 10 (type INT) -10 (type INT) -2 (type INT) 2 (type INT) 0 (type INT) 0 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-10)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-9)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<((4*_FH_inv_1)+-7)    select(_FH_inv_0, i1)!=_FH_inv_3]    i1>=(4*_FH_inv_2)])

SAMPLING
========
unknown
real 8.18
user 8.10
sys 0.08
array_tiling_pnr5.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) -4 (type INT) 4 (type INT) -5 (type INT) 5 (type INT) -2 (type INT) 2 (type INT) 10 (type INT) -10 (type INT) 0 (type INT) 0 (type INT) -3 (type INT) 3 (type INT) 5 (type INT) -5 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-10)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=1)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-9)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<((5*_FH_inv_1)+-9)    select(_FH_inv_0, i1)!=_FH_inv_3]    i1>=(5*_FH_inv_2)])

SAMPLING
========
unknown
real 86.99
user 86.61
sys 0.39
array_tiling_poly1.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)=(i1*i1)    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, i1)+(-1*(i1*i1)))=0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_2 1) (>= _FH_inv_1 0) (forall ((i1 Int)) (or (< i1 0) (= (+ (select _FH_inv_0 i1) (* (- 1) i1 i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.14
user 0.14
sys 0.00
array_tiling_poly3.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    select(_FH_inv_0, i1)<(i1*i1)    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<=0    (select(_FH_inv_0, i1)+(-1*(i1*i1)))<0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_2 1) (>= _FH_inv_1 0) (forall ((i1 Int)) (or (<= i1 0) (< (+ (select _FH_inv_0 i1) (* (- 1) i1 i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.14
user 0.12
sys 0.01
array_tiling_poly5.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    select(_FH_inv_0, i1)<(i1*i1)    i1>=_FH_inv_1])
Added lemma for inv: (forall (INT) [||    i1<0    (select(_FH_inv_0, i1)+(-1*(i1*i1)))<0    (i1+(-_FH_inv_1))>=0])
Success after bootstrapping
(define-fun inv ((_FH_inv_0 (Array Int Int))(_FH_inv_1 Int)(_FH_inv_2 Int)) Bool
  (and (>= _FH_inv_2 1) (>= _FH_inv_1 0) (forall ((i1 Int)) (or (< i1 0) (< (+ (select _FH_inv_0 i1) (* (- 1) i1 i1)) 0) (>= (+ i1 (- _FH_inv_1)) 0)))))
real 0.13
user 0.13
sys 0.00
array_tiling_pr2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) -2 (type INT) 2 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 3 (type INT) -3 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-2)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=-1)
Added lemma for inv: ((-1*_FH_inv_4)>=-3)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-2)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-4)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=(2*_FH_inv_2)    [&&    i1>=0    i1<((2*_FH_inv_1)+-3)    select(_FH_inv_0, i1)=0]    [&&    i1>=0    i1<((2*_FH_inv_1)+-3)    _FH_inv_5<=select(_FH_inv_0, i1)]])

SAMPLING
========
unknown
real 0.54
user 0.53
sys 0.01
array_tiling_pr3.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 7 (type INT) -7 (type INT) -3 (type INT) 3 (type INT) 3 (type INT) -3 (type INT) -2 (type INT) 2 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_5))>=-4)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=-1)
Added lemma for inv: ((-1*_FH_inv_4)>=-3)
Added lemma for inv: ((-1*_FH_inv_5)>=-7)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-2)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_5))>=-6)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-4)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-2)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))>=-8)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_5))>=-6)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))>=-10)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=(3*_FH_inv_2)    [&&    i1>=0    i1<((3*_FH_inv_1)+-5)    select(_FH_inv_0, i1)=0]    [&&    i1>=0    i1<((3*_FH_inv_1)+-5)    _FH_inv_6<=select(_FH_inv_0, i1)]])

SAMPLING
========
unknown
real 3.84
user 3.82
sys 0.03
array_tiling_pr4.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -2 (type INT) 2 (type INT) -4 (type INT) 4 (type INT) -3 (type INT) 3 (type INT) 4 (type INT) -4 (type INT) 0 (type INT) 0 (type INT) -1 (type INT) 1 (type INT) 5 (type INT) -5 (type INT) 7 (type INT) -7 (type INT) 3 (type INT) -3 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: (_FH_inv_1>=1)
Added lemma for inv: ((-1*_FH_inv_3)>=-1)
Added lemma for inv: ((-1*_FH_inv_4)>=-3)
Added lemma for inv: ((-1*_FH_inv_5)>=-7)
Added lemma for inv: ((-1*_FH_inv_6)>=-5)
Added lemma for inv: (_FH_inv_2>0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-2)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_5))>=-6)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_6))>=-4)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-4)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-2)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))>=-8)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_5))>=-6)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_6))>=-6)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_6))>=-4)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))>=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_5))>=-4)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_6))>=-8)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_6))>=-2)
Added lemma for inv: (((-1*_FH_inv_5)+(-1*_FH_inv_6))>=-12)
Added lemma for inv: ((_FH_inv_6+(-1*_FH_inv_5))>=-2)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<((4*_FH_inv_1)+-7)    select(_FH_inv_0, i1)=0]    i1>=(4*_FH_inv_2)    [&&    i1>=0    i1<((4*_FH_inv_1)+-7)    _FH_inv_7<=select(_FH_inv_0, i1)]])

SAMPLING
========
unknown
real 86.43
user 85.97
sys 0.47
array_tiling_pr5.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -4 (type INT) 4 (type INT) -5 (type INT) 5 (type INT) 0 (type INT) 0 (type INT) -3 (type INT) 3 (type INT) 2 (type INT) -2 (type INT) -2 (type INT) 2 (type INT) 5 (type INT) -5 (type INT) -1 (type INT) 1 (type INT) 7 (type INT) -7 (type INT) 3 (type INT) -3 (type INT) 1 (type INT) -1 (type INT) 
real 300.18
user 298.68
sys 1.50
array_tiling_rew.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 3 (type INT) -3 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (0=_FH_inv_3)
Added lemma for inv: (3=_FH_inv_4)
Added lemma for inv: (2=_FH_inv_5)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))=-3)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))=3)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))=-2)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_3))=2)
Added lemma for inv: ((-1*_FH_inv_3)=0)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))=-5)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_4))=-1)
Added lemma for inv: ((-1*_FH_inv_4)=-3)
Added lemma for inv: ((-1*_FH_inv_5)=-2)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_3)>=0)
Added lemma for inv: (_FH_inv_3>=0)
Added lemma for inv: ((-1*_FH_inv_4)>=-3)
Added lemma for inv: (_FH_inv_4>=3)
Added lemma for inv: ((-1*_FH_inv_5)>=-2)
Added lemma for inv: (_FH_inv_5>=2)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: ((_FH_inv_1+_FH_inv_3)>=0)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_3))>=0)
Added lemma for inv: ((_FH_inv_1+_FH_inv_4)>=3)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_4))>=-3)
Added lemma for inv: ((_FH_inv_1+_FH_inv_5)>=2)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_5))>=-2)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-3)
Added lemma for inv: ((_FH_inv_3+_FH_inv_4)>=3)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=3)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=-3)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))>=-2)
Added lemma for inv: ((_FH_inv_3+_FH_inv_5)>=2)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_3))>=2)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_5))>=-2)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))>=-5)
Added lemma for inv: ((_FH_inv_4+_FH_inv_5)>=5)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_4))>=-1)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_5))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    _FH_inv_5<=select(_FH_inv_0, i1)    i1>=(_FH_inv_1+1)])

SAMPLING
========
unknown
real 0.34
user 0.33
sys 0.01
array_tiling_rewnif.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1<=select(_FH_inv_0, i1)    i1>=(_FH_inv_1+1)])

SAMPLING
========
unknown
real 0.17
user 0.16
sys 0.02
array_tiling_rewnifrev.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -2 (type INT) 2 (type INT) 0 (type INT) 0 (type INT) -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=(_FH_inv_1+-1)    i1<=select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.16
user 0.16
sys 0.00
array_tiling_rewnifrev2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 0 (type INT) 0 (type INT) -2 (type INT) 2 (type INT) -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=2)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1<=select(_FH_inv_0, i1)    i1>=(_FH_inv_1+1)])

SAMPLING
========
unknown
real 0.14
user 0.14
sys 0.00
array_tiling_rewrev.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 0 (type INT) 0 (type INT) -1 (type INT) 1 (type INT) -2 (type INT) 2 (type INT) 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) 3 (type INT) -3 (type INT) 7 (type INT) -7 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (7=_FH_inv_3)
Added lemma for inv: (3=_FH_inv_4)
Added lemma for inv: (2=_FH_inv_5)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))=-10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))=-4)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))=-9)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_3))=-5)
Added lemma for inv: ((-1*_FH_inv_3)=-7)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))=-5)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_4))=-1)
Added lemma for inv: ((-1*_FH_inv_4)=-3)
Added lemma for inv: ((-1*_FH_inv_5)=-2)
Added lemma for inv: ((-1*_FH_inv_3)>=-7)
Added lemma for inv: (_FH_inv_3>=7)
Added lemma for inv: ((-1*_FH_inv_4)>=-3)
Added lemma for inv: (_FH_inv_4>=3)
Added lemma for inv: ((-1*_FH_inv_5)>=-2)
Added lemma for inv: (_FH_inv_5>=2)
Added lemma for inv: (_FH_inv_2>1)
Added lemma for inv: ((_FH_inv_2+(-1*_FH_inv_1))>=2)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_4))>=-10)
Added lemma for inv: ((_FH_inv_3+_FH_inv_4)>=10)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=-4)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_4))>=4)
Added lemma for inv: (((-1*_FH_inv_3)+(-1*_FH_inv_5))>=-9)
Added lemma for inv: ((_FH_inv_3+_FH_inv_5)>=9)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_3))>=-5)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_5))>=5)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_3    -1*_FH_inv_1]>=9)
Added lemma for inv: ([+    _FH_inv_2    -1*_FH_inv_3    -1*_FH_inv_1]>=-5)
Added lemma for inv: (((-1*_FH_inv_4)+(-1*_FH_inv_5))>=-5)
Added lemma for inv: ((_FH_inv_4+_FH_inv_5)>=5)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_4))>=-1)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_5))>=1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_4    -1*_FH_inv_1]>=5)
Added lemma for inv: ([+    _FH_inv_2    -1*_FH_inv_4    -1*_FH_inv_1]>=-1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_5    -1*_FH_inv_1]>=4)
Added lemma for inv: ([+    _FH_inv_2    -1*_FH_inv_5    -1*_FH_inv_1]>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_1    _FH_inv_5<=select(_FH_inv_0, i1)])

SAMPLING
========
unknown
real 0.35
user 0.33
sys 0.02
array_tiling_skipped.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: (_FH_inv_2>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    [&&    i1>=0    i1<((2*_FH_inv_1)+-1)    select(_FH_inv_0, i1)<=i1]    i1>=(2*_FH_inv_2)])

SAMPLING
========
unknown
real 0.24
user 0.23
sys 0.01
array_tiling_tcpy.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2542108 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.16
user 0.15
sys 0.00
array_tiling_tcpy2.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 3 (type INT) -3 (type INT) 4 (type INT) -4 (type INT) 5 (type INT) -5 (type INT) 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2542206 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.58
user 0.58
sys 0.01
array_tiling_tcpy3.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 3 (type INT) -3 (type INT) 4 (type INT) -4 (type INT) 1 (type INT) -1 (type INT) 2 (type INT) -2 (type INT) -1 (type INT) 1 (type INT) 0 (type INT) 0 (type INT) 
./runboot_univ_ablative.sh: line 20: 2542212 Segmentation fault      timeout "$to" "$freqhorn" --altern-ver "$alternver" $stdsettings "$benchpath"
real 0.33
user 0.32
sys 0.01
array_tripl_access_init.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 1 (type INT) -1 (type INT) 3 (type INT) -3 (type INT) 2 (type INT) -2 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>(3*_FH_inv_2)    [&&    i1>=0    i1<(3*_FH_inv_1)    select(_FH_inv_0, i1)>=0]])

SAMPLING
========
unknown
real 0.24
user 0.22
sys 0.01
array_tripl_access_init_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 2 (type INT) -2 (type INT) 1 (type INT) -1 (type INT) 3 (type INT) -3 (type INT) 100000 (type INT) -100000 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (100000=_FH_inv_2)
Added lemma for inv: ((-1*_FH_inv_2)=-100000)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((-1*_FH_inv_2)>=-100000)
Added lemma for inv: (_FH_inv_2>=100000)
Added lemma for inv: ((_FH_inv_1+_FH_inv_2)>=100000)
Added lemma for inv: ((_FH_inv_1+(-1*_FH_inv_2))>=-100000)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    [&&    i1>=0    i1<(3*_FH_inv_1)    select(_FH_inv_0, i1)>=0]    i1>(3*_FH_inv_2)])

SAMPLING
========
unknown
real 0.26
user 0.25
sys 0.01
array_two_counters_init_const.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_2    -1*_FH_inv_3]=1)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_4    -1*_FH_inv_3]>=1)
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_2    -1*_FH_inv_3]>=1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_3    -1*_FH_inv_4]>=-1)
Bootstrap: Multiple array accesses for same quantified variable currently unimplemented
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    i1>=_FH_inv_4    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)    (_FH_inv_3>=0)&&(_FH_inv_2<_FH_inv_4)])

SAMPLING
========
unknown
real 0.31
user 0.30
sys 0.02
array_two_counters_init_var.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_2    -1*_FH_inv_3]=1)
Added lemma for inv: (_FH_inv_2>=0)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_3))>=1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_4    -1*_FH_inv_3]>=1)
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_2    -1*_FH_inv_3]>=1)
Added lemma for inv: ([+    _FH_inv_2    _FH_inv_3    -1*_FH_inv_4]>=-1)
Bootstrap: Multiple array accesses for same quantified variable currently unimplemented
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    i1>=_FH_inv_4    (_FH_inv_3>=0)&&(_FH_inv_2<_FH_inv_4)    select(_FH_inv_0, i1)=select(_FH_inv_1, i1)])

SAMPLING
========
unknown
real 0.31
user 0.30
sys 0.01
array_two_counters_max_subtr.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_4    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_1    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_2    -1*_FH_inv_4]>=-1)
Added lemma for inv: ([+    _FH_inv_4    -1*_FH_inv_1    -1*_FH_inv_2]=1)
Added lemma for inv: ((_FH_inv_4+(-1*_FH_inv_2))>=1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>=i1    _FH_inv_3>=select(_FH_inv_0, i1)    i1>=_FH_inv_2    (_FH_inv_2>=0)&&(_FH_inv_1<_FH_inv_4)])

SAMPLING
========
unknown
real 0.41
user 0.39
sys 0.02
array_two_counters_min_max.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_5    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_5    -1*_FH_inv_1    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_2    -1*_FH_inv_5]>=-1)
Added lemma for inv: ([+    _FH_inv_5    -1*_FH_inv_1    -1*_FH_inv_2]=1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_5+(-1*_FH_inv_2))>=1)
- - - Bootstrapped cand for inv: ((_FH_inv_3>=_FH_inv_4)||((_FH_inv_2>=0)&&(_FH_inv_1<_FH_inv_5)))

SAMPLING
========
unknown
real 2.29
user 2.30
sys 0.02
array_two_counters_min_max_prog.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: ([+    _FH_inv_3    _FH_inv_7    -1*_FH_inv_4]>=1)
Added lemma for inv: ([+    _FH_inv_7    -1*_FH_inv_3    -1*_FH_inv_4]>=1)
Added lemma for inv: ([+    _FH_inv_3    _FH_inv_4    -1*_FH_inv_7]>=-1)
Added lemma for inv: ([+    _FH_inv_7    -1*_FH_inv_3    -1*_FH_inv_4]=1)
Added lemma for inv: ((_FH_inv_7+(-1*_FH_inv_4))>=1)
Added lemma for inv: (_FH_inv_3>=0)
Bootstrap: Multiple array accesses for same quantified variable currently unimplemented
real 300.21
user 298.37
sys 1.86
array_two_counters_replace.smt2

INITIALIZE PREDICATE inv
====================
extract_consts found: 3 (type INT) -3 (type INT) 5 (type INT) -5 (type INT) -1 (type INT) 1 (type INT) 1 (type INT) -1 (type INT) 0 (type INT) 0 (type INT) 

SEED MINING for inv
===========

BOOTSTRAPPING
=============
Added lemma for inv: (((_FH_inv_1+(-1*_FH_inv_2))>=0)||((_FH_inv_2+(-1*_FH_inv_1))>0))
Added lemma for inv: (((_FH_inv_2+(-1*_FH_inv_1))>=0)||((_FH_inv_1+(-1*_FH_inv_2))>0))
Added lemma for inv: ([+    _FH_inv_3    -1*_FH_inv_1    -1*_FH_inv_2]=1)
Added lemma for inv: (_FH_inv_1>=0)
Added lemma for inv: ((_FH_inv_3+(-1*_FH_inv_2))>=1)
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_3    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_3    -1*_FH_inv_1    -1*_FH_inv_2]>=1)
Added lemma for inv: ([+    _FH_inv_1    _FH_inv_2    -1*_FH_inv_3]>=-1)
- - - Bootstrapped cand for inv: (forall (INT) [||    0>i1    (select(_FH_inv_0, i1)!=0)&&(select(_FH_inv_0, i1)!=1)    i1>=_FH_inv_1    (_FH_inv_2>=0)&&(_FH_inv_1<_FH_inv_3)])

SAMPLING
========
unknown
real 0.62
user 0.61
sys 0.01
Sun Oct  9 17:10:42 EDT 2022
